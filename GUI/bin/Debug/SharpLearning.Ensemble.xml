<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpLearning.Ensemble</name>
    </assembly>
    <members>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationClassificationEnsembleSelection">
            <summary>
            Greedy backwards elimination of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationClassificationEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,System.Int32)">
            <summary>
            Greedy backwards elimination of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationClassificationEnsembleSelection.Select(SharpLearning.Containers.ProbabilityPrediction[][],System.Double[])">
            <summary>
            Greedy backwards elimination of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each row in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationRegressionEnsembleSelection">
            <summary>
            Greedy backward elimination of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationRegressionEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,System.Int32)">
            <summary>
            Greedy backward elimination of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.BackwardEliminationRegressionEnsembleSelection.Select(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Greedy backward elimination of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each column in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchClassificationEnsembleSelection">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchClassificationEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="numberOfModelsFromStart">Number of models from start of the search. 
            The top n models will be selected based in their solo performance</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once</param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchClassificationEnsembleSelection.Select(SharpLearning.Containers.ProbabilityPrediction[][],System.Double[])">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each row in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchRegressionEnsembleSelection">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchRegressionEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="numberOfModelsFromStart">Number of models from start of the search. 
            The top n models will be selected based in their solo performance</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once</param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.ForwardSearchRegressionEnsembleSelection.Select(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each column in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.IClassificationEnsembleSelection">
            <summary>
            Interface for classification ensemble selection.
            Finds the best subset of models to combine in an ensemble.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.IClassificationEnsembleSelection.Select(SharpLearning.Containers.ProbabilityPrediction[][],System.Double[])">
            <summary>
            Finds the best subset of models to combine in an ensemble.
            </summary>
            <param name="crossValidatedModelPredictions"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.IRegressionEnsembleSelection">
            <summary>
            Interface for regression ensemble selection.
            Finds the best subset of models to combine in an ensemble.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.IRegressionEnsembleSelection.Select(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Finds the best subset of models to combine in an ensemble.
            </summary>
            <param name="crossValidatedModelPredictions"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.RandomClassificationEnsembleSelection">
            <summary>
            Iterative random selection of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.RandomClassificationEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Iterative random selection of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="iterations">Number of iterations to try random selection</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once</param>
            <param name="seed"></param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.RandomClassificationEnsembleSelection.Select(SharpLearning.Containers.ProbabilityPrediction[][],System.Double[])">
            <summary>
            Greedy forward selection of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each row in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.EnsembleSelectors.RandomRegressionEnsembleSelection">
            <summary>
            Iterative random selection of ensemble models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.RandomRegressionEnsembleSelection.#ctor(SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Iterative random selection of ensemble models.
            </summary>
            <param name="metric">Metric to minimize</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="iterations">Number of iterations to try random selection</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once</param>
            <param name="seed"></param>
        </member>
        <member name="M:SharpLearning.Ensemble.EnsembleSelectors.RandomRegressionEnsembleSelection.Select(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Iterative random selection of ensemble models.
            </summary>
            <param name="crossValidatedModelPredictions">cross validated predictions from multiple models. 
            Each column in the matrix corresponds to predictions from a separate model</param>
            <param name="targets">Corresponding targets</param>
            <returns>The indices of the selected model</returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationBackwardEliminationModelSelectingEnsembleLearner">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy backward elimination.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationBackwardEliminationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy backward elimination.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold StratifiedCrossValidation and minimization of multi-class logloss and mean of probabilities is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationBackwardEliminationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction})">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy backward elimination.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner">
            <summary>
            Classification ensemble learner.
            http://mlwave.com/kaggle-ensembling-guide/
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Double,System.Int32)">
            <summary>
            Classification ensemble learner. Combines several models into a single ensemble model.
            Default combination method is mean of the probabilities of the models.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,System.Double,System.Int32)">
            <summary>
            Classification ensemble learner. Combines several models into a single ensemble model.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.#ctor(System.Func{SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[],SharpLearning.Common.Interfaces.IPredictorModel{SharpLearning.Containers.ProbabilityPrediction}}[],System.Func{SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy},System.Double,System.Int32)">
            <summary>
            Classification ensemble learner. Combines several models into a single ensemble model.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a classification ensemble
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a classification ensemble on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.Sample(System.Int32[],System.Int32[])">
            <summary>
            Random sampling
            </summary>
            <param name="inSample"></param>
            <param name="allIndices"></param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationForwardSearchModelSelectingEnsembleLearner">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationForwardSearchModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold StratifiedCrossValidation and minimization of multi-class logloss and mean of probabilities is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationForwardSearchModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction},System.Int32,System.Boolean)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
            <param name="numberOfModelsFromStart">Number of models from start of the search. 
            The top n models will be selected based in their solo performance</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once. Default is true</param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner">
            <summary>
            Classification model selecting EnsembleLearner.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,SharpLearning.Ensemble.EnsembleSelectors.IClassificationEnsembleSelection)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="ensembleSelection">Ensemble selection method used to find the beset subset of models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},System.Func{SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy},SharpLearning.Ensemble.EnsembleSelectors.IClassificationEnsembleSelection)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="ensembleSelection">Ensemble selection method used to find the beset subset of models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection using the provided indices.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection using the provided indices.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a ClassificationEnsembleModel based on model selection.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationModelSelectingEnsembleLearner.SelectModels(SharpLearning.Containers.Matrices.F64Matrix,SharpLearning.Containers.ProbabilityPrediction[][],System.Double[])">
            <summary>
            Based on the provided metaObservations selects the best combination of learners to include in the ensemble.
            Following the selected learners are trained.
            </summary>
            <param name="observations"></param>
            <param name="metaObservations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationRandomModelSelectingEnsembleLearner">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationRandomModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32,System.Int32)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold StratifiedCrossValidation and minimization of mean square error and mean is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="iterations">Number of iterations to random select model combinations.</param> 
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationRandomModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,SharpLearning.Containers.ProbabilityPrediction},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Classification model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
            <param name="iterations">Number of iterations to random select model combinations.</param> 
            <param name="selectWithReplacement">If true the same model can be selected multiple times.</param>
            <param name="seed"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner">
            <summary>
            Stacking Classification Ensemble Learner.
            http://mlwave.com/kaggle-ensembling-guide/
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.Common.Interfaces.ILearner{SharpLearning.Containers.ProbabilityPrediction},System.Boolean)">
            <summary>
            Stacking Classification Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            The bottom level models generates output for the top level model using cross validation.
            Default is 5-fold StratifiedCrossValidation.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features. Default is true</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.Common.Interfaces.ILearner{SharpLearning.Containers.ProbabilityPrediction},SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},System.Boolean)">
            <summary>
            Stacking Classification Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            The bottom level models generates output for the top level model using cross validation.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features. Defualt is true</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{SharpLearning.Containers.ProbabilityPrediction}[],System.Func{SharpLearning.Containers.Matrices.F64Matrix,System.Double[],SharpLearning.Common.Interfaces.IPredictorModel{SharpLearning.Containers.ProbabilityPrediction}},SharpLearning.CrossValidation.CrossValidators.ICrossValidation{SharpLearning.Containers.ProbabilityPrediction},System.Boolean)">
            <summary>
            Stacking Classification Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a stacking classification ensemble
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a stacking classification ensemble on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{SharpLearning#Containers#ProbabilityPrediction}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.ClassificationStackingEnsembleLearner.LearnStackingModel(SharpLearning.Containers.Matrices.F64Matrix,SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a stacking classification ensemble based on the provided meta observations.
            </summary>
            <param name="observations"></param>
            <param name="metaObservations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionBackwardEliminationModelSelectingEnsembleLearner">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using backwards elimination.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionBackwardEliminationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using backwards elimination.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold RandomCrossValidation and minimization of mean square error and mean is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionBackwardEliminationModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double})">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using backwards elimination.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner">
            <summary>
            Regression ensemble learner.
            http://mlwave.com/kaggle-ensembling-guide/
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Double,System.Int32)">
            <summary>
            Regression ensemble learner. Combines several models into a single ensemble model.
            Default combination method is the mean of all model outputs.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,System.Double,System.Int32)">
            <summary>
            Regression ensemble learner. Combines several models into a single ensemble model.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models. Default is mean of all models in the ensmble</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.#ctor(System.Func{SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[],SharpLearning.Common.Interfaces.IPredictorModel{System.Double}}[],System.Func{SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy},System.Double,System.Int32)">
            <summary>
            Regression ensemble learner. Combines several models into a single ensemble model.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="subSampleRatio">Default is 1.0. All models are trained on all data. 
            If different from 1.0 models are trained using bagging with the chosen sub sample ratio</param>
            <param name="seed">Seed for the bagging when used</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a regression ensemble
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a regression ensemble on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionForwardSearchModelSelectingEnsembleLearner">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionForwardSearchModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold RandomCrossValidation and minimization of mean square error and mean is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionForwardSearchModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double},System.Int32,System.Boolean)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using greedy forward selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
            <param name="numberOfModelsFromStart">Number of models from start of the search. 
            The top n models will be selected based in their solo performance</param>
            <param name="selectWithReplacement">If true the same model can be selected multiple times.
            This will correspond to weighting the models. If false each model can only be selected once. Default is true</param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner">
            <summary>
            Regression model selecting EnsembleLearner.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,SharpLearning.Ensemble.EnsembleSelectors.IRegressionEnsembleSelection)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="ensembleSelection">Ensemble selection method used to find the beset subset of models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},System.Func{SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy},SharpLearning.Ensemble.EnsembleSelectors.IRegressionEnsembleSelection)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
            <param name="ensembleSelection">Enemble selection method used to find the beset subset of models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a RegressionEnsembleModel based on model selection.
            Trains several models and selects the best subset of models for the ensemble.
            The selection of the best set of models is based on cross validation.
            Trains several models and selects the best subset of models for the ensemble.
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a stacking classification ensemble on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionModelSelectingEnsembleLearner.SelectModels(SharpLearning.Containers.Matrices.F64Matrix,SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Based on the provided metaObservations selects the best combination of learners to include in the ensemble.
            Following the selected learners are trained.
            </summary>
            <param name="observations"></param>
            <param name="metaObservations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionRandomModelSelectingEnsembleLearner">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionRandomModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32,System.Int32)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation. 
            Default is 5-fold RandomCrossValidation and minimization of mean square error and mean is used to combine the models.
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="iterations">Number of iterations to random select model combinations.</param> 
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionRandomModelSelectingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Int32,SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy,SharpLearning.Common.Interfaces.IMetric{System.Double,System.Double},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Regression model selecting EnsembleLearner. 
            Trains several models and selects the best subset of models for the ensemble using iterative random selection.
            The selection of the best set of models is based on cross validation. 
            http://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="numberOfModelsToSelect">Number of models to select</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="ensembleStrategy">Strategy for ensembling models</param>
            <param name="metric">Metric to minimize</param>
            <param name="iterations">Number of iterations to random select model combinations.</param> 
            <param name="selectWithReplacement">If true the same model can be selected multiple times.</param>
            <param name="seed"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner">
            <summary>
            Stacking Regression Ensemble Learner.
            http://mlwave.com/kaggle-ensembling-guide/
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],SharpLearning.Common.Interfaces.ILearner{System.Double},System.Boolean)">
            <summary>
            Stacking Regression Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            The bottom level models generates output for the top level model using cross validation.
            Default is 5-fold RandomCrossValidation.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features. Default is true</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],SharpLearning.Common.Interfaces.ILearner{System.Double},SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},System.Boolean)">
            <summary>
            Stacking Regression Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            The bottom level models generates output for the top level model using cross validation.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features. Default is true</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.#ctor(SharpLearning.Common.Interfaces.IIndexedLearner{System.Double}[],System.Func{SharpLearning.Containers.Matrices.F64Matrix,System.Double[],SharpLearning.Common.Interfaces.IPredictorModel{System.Double}},SharpLearning.CrossValidation.CrossValidators.ICrossValidation{System.Double},System.Boolean)">
            <summary>
            Stacking Regression Ensemble Learner. 
            Combines several models into a single ensemble model using a top or meta level model to combine the models.
            The bottom level models generates output for the top level model using cross validation.
            </summary>
            <param name="learners">Learners in the ensemble</param>
            <param name="metaLearner">Meta learner or top level model for combining the ensemble models</param>
            <param name="crossValidation">Cross validation method</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a stacking regression ensemble
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns a stacking classification ensemble on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.SharpLearning#Common#Interfaces#ILearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.SharpLearning#Common#Interfaces#IIndexedLearner{System#Double}#Learn(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.LearnMetaFeatures(SharpLearning.Containers.Matrices.F64Matrix,System.Double[],System.Int32[])">
            <summary>
            Learns and extracts the meta features learned by the ensemble models on the provided indices
            </summary>
            <param name="observations"></param>
            <param name="targets"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Learners.RegressionStackingEnsembleLearner.LearnStackingModel(SharpLearning.Containers.Matrices.F64Matrix,SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            Learns a stacking regression ensemble based on the provided meta observations.
            </summary>
            <param name="observations"></param>
            <param name="metaObservations"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Models.ClassificationEnsembleModel">
            <summary>
            Classification ensemble model
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.#ctor(SharpLearning.Common.Interfaces.IPredictorModel{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy)">
            <summary>
            Classification ensemble model
            </summary>
            <param name="ensembleModels">Models included in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.Predict(System.Double[])">
            <summary>
            
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.SharpLearning#Common#Interfaces#IPredictor{SharpLearning#Containers#ProbabilityPrediction}#Predict(System.Double[])">
            <summary>
            Predicts a single observation using the ensembled probabilities
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.SharpLearning#Common#Interfaces#IPredictor{SharpLearning#Containers#ProbabilityPrediction}#Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Private explicit interface implementation for probability predictions
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.PredictProbability(System.Double[])">
            <summary>
            Predicts a single observation using the ensembled probabilities
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.PredictProbability(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Predicts a set of observations using the ensembled probabilities
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.GetRawVariableImportance">
            <summary>
            Gets the raw unsorted vatiable importance scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationEnsembleModel.GetVariableImportance(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Returns the rescaled (0-100) and sorted variable importance scores with corresponding name
            </summary>
            <param name="featureNameToIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel">
            <summary>
            Classification stacking ensemble model
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.#ctor(SharpLearning.Common.Interfaces.IPredictorModel{SharpLearning.Containers.ProbabilityPrediction}[],SharpLearning.Common.Interfaces.IPredictorModel{SharpLearning.Containers.ProbabilityPrediction},System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="ensembleModels">Models included in the ensemble</param>
            <param name="metaModel">Meta or top level model to combine the ensemble models</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features</param>
            <param name="numberOfClasses">Number of classes in the classification problem</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.Predict(System.Double[])">
            <summary>
            Predicts a single observation
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Predicts a set of observations
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.SharpLearning#Common#Interfaces#IPredictor{SharpLearning#Containers#ProbabilityPrediction}#Predict(System.Double[])">
            <summary>
            Predicts a single observation using the ensembled probabilities
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.SharpLearning#Common#Interfaces#IPredictor{SharpLearning#Containers#ProbabilityPrediction}#Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Private explicit interface implementation for probability predictions
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.PredictProbability(System.Double[])">
            <summary>
            Predicts a single observation using the ensembled probabilities
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.PredictProbability(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Predicts a set of observations using the ensembled probabilities
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.GetRawVariableImportance">
            <summary>
            Gets the raw unsorted vatiable importance scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.ClassificationStackingEnsembleModel.GetVariableImportance(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Returns the rescaled (0-100) and sorted variable importance scores with corresponding name
            </summary>
            <param name="featureNameToIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Models.RegressionEnsembleModel">
            <summary>
            Regression ensemble model
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionEnsembleModel.#ctor(SharpLearning.Common.Interfaces.IPredictorModel{System.Double}[],SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy)">
            <summary>
            Regression ensemble model
            </summary>
            <param name="ensembleModels">Models included in the ensemble</param>
            <param name="ensembleStrategy">Strategy on how to combine the models</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionEnsembleModel.Predict(System.Double[])">
            <summary>
            
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionEnsembleModel.Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionEnsembleModel.GetRawVariableImportance">
            <summary>
            Gets the raw unsorted vatiable importance scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionEnsembleModel.GetVariableImportance(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Returns the rescaled (0-100) and sorted variable importance scores with corresponding name 
            </summary>
            <param name="featureNameToIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel">
            <summary>
            Regression stacking ensemble model
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel.#ctor(SharpLearning.Common.Interfaces.IPredictorModel{System.Double}[],SharpLearning.Common.Interfaces.IPredictorModel{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="ensembleModels">Models included in the ensemble</param>
            <param name="metaModel">Meta or top level model to combine the ensemble models</param>
            <param name="includeOriginalFeaturesForMetaLearner">True; the meta learner also recieves the original features. 
            False; the meta learner only recieves the output of the ensemble models as features</param>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel.Predict(System.Double[])">
            <summary>
            Predicts a single observation
            </summary>
            <param name="observation"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel.Predict(SharpLearning.Containers.Matrices.F64Matrix)">
            <summary>
            Predicts a set of observations
            </summary>
            <param name="observations"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel.GetRawVariableImportance">
            <summary>
            Gets the raw unsorted vatiable importance scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Models.RegressionStackingEnsembleModel.GetVariableImportance(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Returns the rescaled (0-100) and sorted variable importance scores with corresponding name
            </summary>
            <param name="featureNameToIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SharpLearning.Ensemble.Strategies.GeometricMeanProbabilityClassificationEnsembleStrategy">
            <summary>
            Geometric mean probability classification ensemble strategy. Class probabilities are combined using the geometric mean across all models.
            https://en.wikipedia.org/wiki/Geometric_mean
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.GeometricMeanProbabilityClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            Geometric mean probability classification ensemble strategy. Class probabilities are combined using the geometric mean across all models.
            </summary>
            <param name="ensemblePredictions"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.GeometricMeanProbabilityClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[][],SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            Geometric mean probability classification ensemble strategy. Class probabilities are combined using the geometric mean across all models.
            </summary>
            <param name="ensemblePredictions"></param>
            <param name="predictions"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy">
            <summary>
            Interface for classification ensemble strategies
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.IClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[][],SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <param name="predictions"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy">
            <summary>
            Interface for regression ensemble strategies
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy.Combine(System.Double[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.IRegressionEnsembleStrategy.Combine(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <param name="predictions"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Strategies.MeanProbabilityClassificationEnsembleStrategy">
            <summary>
            Mean probability classification ensemble strategy. Class probabilities are combined using the mean across all models.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.MeanProbabilityClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            Mean probability classification ensemble strategy. Class probabilities are combined using the mean across all models.
            </summary>
            <param name="ensemblePredictions"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.MeanProbabilityClassificationEnsembleStrategy.Combine(SharpLearning.Containers.ProbabilityPrediction[][],SharpLearning.Containers.ProbabilityPrediction[])">
            <summary>
            Mean probability classification ensemble strategy. Class probabilities are combined using the mean across all models.
            </summary>
            <param name="ensemblePredictions"></param>
            <param name="predictions"></param>
        </member>
        <member name="T:SharpLearning.Ensemble.Strategies.MeanRegressionEnsembleStrategy">
            <summary>
            Mean regression ensemble strategy. Models are combined using standard mean.
            </summary>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.MeanRegressionEnsembleStrategy.Combine(System.Double[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <returns></returns>
        </member>
        <member name="M:SharpLearning.Ensemble.Strategies.MeanRegressionEnsembleStrategy.Combine(SharpLearning.Containers.Matrices.F64Matrix,System.Double[])">
            <summary>
            
            </summary>
            <param name="ensemblePredictions"></param>
            <param name="predictions"></param>
        </member>
    </members>
</doc>
